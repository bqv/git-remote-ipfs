#!/usr/bin/env node

/**
 * Remote helper programs are invoked with one or (optionally) two arguments.
 * The first argument specifies a remote repository as in Git; it is either the name of a configured remote or a URL.
 * The second argument specifies a URL; it is usually of the form <transport>://<address>.
 * https://git-scm.com/docs/gitremote-helpers#_invocation
 */
if(process.argv.length < 2) {
  console.error('Usage: git-remote-igis remote-name url')
  process.exit(-10)
}

const IPFSRemote = require('./')
const readline = require('readline')
const Git = require('nodegit')
const IPFSProxy = require('ipfs-http-client')
const levelup = require('levelup')
const leveldown = require('leveldown')
const { Console } = require('console');
const fs = require('fs')

const DEBUG = !!process.env.DEBUG
const console = new Console(process.stderr)

if(!process.env.GIT_DIR) {
  process.stderr.write('$GIT_DIR must be defined')
  process.exit(-9)
}

;(async () => {
  const repo = await Git.Repository.open(process.env.GIT_DIR)
  const ipfs = IPFSProxy()
  const dataDir = `${process.env.GIT_DIR}/remote-ipfs`
  fs.mkdirSync(dataDir, { recursive: true })
  const cacheDir = `${dataDir}/cache`
  const cacheDB = levelup(leveldown(cacheDir))  
  const cache = {
    get: async (key) => {
      if(!process.env.IGIS_NO_CACHE) {
        try {
          return await cacheDB.get(key)
        } catch(err) { /* Not found */ }
      }
    },
    put: cacheDB.put.bind(cacheDB),
  }
  const url = process.argv[3]
  const remote = await (new IPFSRemote({ ipfs, cache, repo, url })).create()

  const rl = readline.createInterface({
    input: process.stdin, output: process.stdout, terminal: false,
  })
  const pushRefs = []
  const fetchRefs = []
  rl.on('line', async (line) => {
    DEBUG && console.debug('<', line)

    if(line === 'capabilities') {
      for(let option of ['options', 'push', 'fetch']) {
        DEBUG && console.debug(`> ${option}`)
        process.stdout.write(`${option}\n`)
      }
      process.stdout.write("\n")
    } else if(line.startsWith('list')) {
      if(remote.vfs && remote.vfs.HEAD) {
        DEBUG && console.debug(`> @${remote.vfs.HEAD} HEAD`)
        process.stdout.write(`@${remote.vfs.HEAD} HEAD\n`)
      }
      if(remote.vfs && remote.vfs.refs) {
        await remote.serializeRefs(remote.vfs.refs)
      }
      process.stdout.write("\n")
    } else if(line.startsWith('push')) {
      try {
        const ref = line.replace(/^push\s+/, '')
        pushRefs.push(ref.split(':'))
      } catch(err) {
        console.error(`Can't Push: Invalid Refs: '${line}' (${err})\n`)
        process.exit(-12)
      }
    } else if(line.startsWith('fetch')) {
      const ref = line.replace(/^fetch\s+/, '')
      fetchRefs.push(ref.split(' '))
    } else if(line === '') { // a blank line follows a set of push/fetch commands
      if(pushRefs.length > 0) { 
        const cid = await remote.doPush(pushRefs)
        process.stderr.write(`\x1b[34mipfs::\x1b[34;1m${cid.toString()}\x1b[39m\n`)
        DEBUG && console.debug('>')
        process.stdout.write("\n")
      }
      if(fetchRefs.length > 0){ 
        await remote.doFetch(fetchRefs)
        DEBUG && console.debug('>')
        try {
          process.stdout.write("\n")
        } catch(err) {
           // this raises EPIPE for a closed pipe, but git doesn't exit otherwise
        }
      }
    } else {
      console.debug(line)
    }
  })
})()