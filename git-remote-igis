#!/usr/bin/env node

console.error = console.debug = console.warn = (
  (msg) => process.stderr.write(`${msg}\n`)
)

/**
 * Remote helper programs are invoked with one or (optionally) two arguments.
 * The first argument specifies a remote repository as in Git; it is either the name of a configured remote or a URL.
 * The second argument specifies a URL; it is usually of the form <transport>://<address>.
 * https://git-scm.com/docs/gitremote-helpers#_invocation
 */
if(process.argv.length < 2) {
  console.error('Usage: git-remote-igis remote-name url')
  process.exit(-10)
}

const readline = require('readline')
const Git = require('nodegit')
const IPFS = require('ipfs')
const IPFSProxy = require('ipfs-http-client')
const all = require('it-all')
const toBuffer = require('it-to-buffer')
const OrbitDB = require('orbit-db')
const levelup = require('levelup')
const leveldown = require('leveldown')
const MetaMaskConnector = require('node-metamask');
const Web3 = require('web3')
const open = require('open')
const MetaMask = require('@metamask/inpage-provider')
const LocalMessageDuplexStream = require('post-message-stream')

const EMPTY_REPO_CID = 'QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn'

const objForSig = (sig) => ({
  name: sig.name(), email: sig.email(),
  time: sig.when().time(), offset: sig.when().offset()
})

const metamaskStream = new LocalMessageDuplexStream({
  name: 'inpage',
  target: 'contentscript',
})
const ethereum = initProvider({ connectionStream: metamaskStream })
const web3 = new Web3(ethereum)
web3.personal.sign(
  web3.fromUtf8("Howdy-Ho!"),
  web3.eth.defaultAccount,
  (err, sig) => (err ? console.error(err) : console.log(sig))
)

// const connector = new MetaMaskConnector({
//   port: 3333, // this is the default port
//   onConnect() { console.debug('MetaMask client connected') },
// })
// open('http://localhost:3333')

// connector.start().then(() => {
//   // Now go to  in your MetaMask enabled web browser.
//   console.debug(connector.getProvider())
//   const web3 = new Web3(connector.getProvider());
// }))

(async () => {
  const repo = await Git.Repository.open(process.env.GIT_DIR)
  const odb = await repo.odb()
  const ipfs = IPFSProxy()
  //const orbitdb = await OrbitDB.createInstance(ipfs)
  // const dbOptions = {
  //   accessController: { write: [orbitdb.identity.id] },
  //   directory: os.homedir() + '/.orbitdb',
  // }
  // hanging
  //const cache = await orbitdb.kvstore('igis:hash-cache', dbOptions)
  //await cache.load()
  
  const cacheDir = `${process.env.GIT_DIR}/remote-igis`
  const cacheDB = levelup(leveldown(cacheDir))  
  const cache = {
    get: async (key) => {
      try {
        return await cacheDB.get(key)
      } catch(err) { /* Not found */ }
    },
    put: cacheDB.put.bind(cacheDB),
  }

  const oidInODB = async (oid) => {
    try {
      return await odb.existsPrefix(oid, oid.length)
    } catch(err) {
      return false
    }
  }

  const treeFor = async (root, modesCID) => {
    const list = await all(ipfs.ls(root))
    const tb = await Git.Treebuilder.create(repo, null)
    const modes = (await ipfs.dag.get(modesCID)).value

    await Promise.all(list.map(async ({ name, cid, type }) => {
      if(type === 'dir') {
        const tree = await treeFor(cid, modes[name])
        tb.insert(name, tree, Git.TreeEntry.FILEMODE.TREE)
      } else {
        let oid = (await cache.get(cid)).toString()
        if(!oid || !(await oidInODB(oid))) {
          const buffer = await toBuffer(ipfs.cat(cid))
          oid = await odb.write(buffer.toString(), buffer.length, Git.Object.TYPE.BLOB)
          cache.put(cid, oid)
        }
        tb.insert(name, oid, modes[name])
      }
    }))

    return tb.write()
  }

  const commitFor = async (cid) => {
    const root = (await ipfs.dag.get(cid)).value
    const { authorSig, committerSig, encoding, message, tree:treeCID, modes, parents:parentCIDs, signature } = root
    const tree = await Git.Tree.lookup(repo, await treeFor(treeCID, modes))
    const parents = await Promise.all(parentCIDs.map(
      async c => await Git.Commit.lookup(repo, await commitFor(c))
    ))
    const parent_count = parents.length
    const author = Git.Signature.create(authorSig.name, authorSig.email, authorSig.time, authorSig.offset)
    const committer = Git.Signature.create(committerSig.name, committerSig.email, committerSig.time, committerSig.offset)

    let commit
    if(signature) {
      const buffer = await Git.Commit.createBuffer(
        repo, author, committer, encoding, message, tree, parent_count, parents
      )
      commit = await Git.Commit.createWithSignature(repo, buffer.toString(), signature, 'gpgsig')
    } else {
      commit = await Git.Commit.create(
        repo, null, author, committer, encoding, message, tree, parent_count, parents
      )
    }
    process.stderr.write(`${commit} (${cid})\n`)
    return commit
  }

  const doFetch = async () => {
    for(const [hash, ref] of fetchRefs) {
      const commit = await commitFor(`${process.argv[3]}/.git/${ref}/cid`)
      if(commit.toString() !== hash) {
        console.warn(`Generated Hash Didn't Match Requested`)
        console.warn(` ${commit} !== ${hash}`)
      }
      await repo.createBranch(ref.replace(/^refs\/heads\//, ''), commit)
      console.debug(`Created Branch: ${ref.replace(/^refs\/heads\//, '')}`)
    }
    await repo.setHead(fetchRefs[0][1])
  }

  const addTree = async (tree, path = '', base = EMPTY_REPO_CID) => {
    var modes = {}
    for(const e of (await tree.entries())) {
      if(e.isTree()) {
        [base, sub] = await addTree(await e.getTree(), `${path}${e.name()}/`, base, modes)
        modes[e.name()] = sub
      } else if(e.filemode().toString(8)[0] === '1') { // e.isBlob() is false for links
        let cid = await cache.get(e.oid())
        if(!cid) {
          const content = (await e.getBlob()).content()
          console.debug('Adding')
          const progress = (len) => process.stderr.write(`len:${len}\n`)
          cid = (await all(ipfs.add({ content: content, progress: progress })))[0].cid
          cache.put(e.oid(), cid)
        }

        base = await ipfs.object.patch.addLink(
          base, { name: `${path}${e.name()}`, cid: cid }, { create: true }
        )
        modes[e.name()] = e.filemode()
      } else {
        console.warn(`Neither Blob nor Tree TreeEntry: ${e.oid()} (${e.filemode().toString(8)})`)
      }
    }

    return [base, await ipfs.dag.put(modes)]
  }

  const addCommit = async (oid) => {
    process.stderr.write(`mit:${oid}: `)
    let cid = await cache.get(oid)
    if(!cid) {
      const head = await Git.Commit.lookup(repo, oid)
      const [tree, modes] = await addTree(await head.getTree())
      process.stderr.write(`tree:${tree}\n`) // \r\x1b[A
      const parents = await Promise.all((await head.parents()).map(p => addCommit(p)))

      const obj = {
        authorSig: objForSig(head.author()), committerSig: objForSig(head.committer()),
        encoding: head.messageEncoding(), message: head.message(),
        parents: parents, tree: new IPFSProxy.CID(tree), modes: modes,
      }
      try {
        obj.signature = await head.headerField('gpgsig')
      } catch(err) { /* No signature */ }
      cid = await ipfs.dag.put(obj)
    }
    return cid
  }

  const addTag = async (oid, name) => {
    let obj
    try {
      process.stderr.write(`tag:${oid}: `)
      const tag = await Git.Tag.lookup(repo, oid)
      const commit = await addCommit(tag.targetId())

      obj = {
        commit: commit, taggerSig: objForSig(tag.tagger()),
        name: name, message: tag.message(), type: 'annotated',
      }
    } catch(err) { // Lightweight tags return a commit instead of a tag
      const commit = await addCommit(oid)
      obj = {
        name: name, commit: commit, type: 'lightweight',
      }
    }
    return await ipfs.dag.put(obj)
  }

  const serializeRefs = async (root, path = 'refs') => {
    const list = await all(ipfs.ls(root))
    await Promise.all(list.map(async f => {
      if(f.type === 'dir') {
        await serializeRefs(f.cid, `${path}/${f.name}`)
      } else {
        root = (await ipfs.dag.get(f.cid)).value
        process.stdout.write(`${root.oid} ${path}/${f.name}\n`)
      }
    }))
  }

  const doPush = async () => {
    let base, head
    for(let [src, dst] of pushRefs) {
      try {
        const oid = await Git.Reference.nameToId(repo, src)
        const isTag = dst.split('/')[1] === 'tags'
        const obj = {
          oid: oid.toString(),
          cid: await (isTag
            ? addTag(oid, dst.split('/').slice(2).join('/'))
            : addCommit(oid)
          ),
        }
        const meta = await ipfs.dag.put(obj)

        if(!base) {
          console.debug(`${obj.cid}${isTag ? '/commit' : ''}`)
          base = ((await ipfs.dag.get(`${obj.cid}${isTag ? '/commit' : ''}`)).value).tree
        }

        // HEAD and refs/ are UnixFS b/c .git in the root needs to be one for the
        // CID to be index browsable via a gateway
        base = await ipfs.object.patch.addLink(
          base, { name: `.git/${dst}`, cid: meta }, { create: true }
        )

        if(!head) {
          head = (await all(ipfs.add(Buffer.from(dst))))[0].cid
          base = await ipfs.object.patch.addLink(
            base, { name: '.git/HEAD', cid: head }, { create: true }
          )
        }
        process.stdout.write(`ok ${dst}\n`)
      } catch(e) {
        console.error(e)
      }
    }
    process.stderr.write(`igis::${base}\n`)
  }

  const rl = readline.createInterface({
    input: process.stdin, output: process.stdout, terminal: false,
  })
  const seen = {}
  const pushRefs = []
  const fetchRefs = []
  rl.on('line', async (line) => {
    console.debug(line)
    if(seen[line]) return // fetch called twice on clone
    seen[line] = true

    if(line === 'capabilities') {
      process.stdout.write("options\n")
      process.stdout.write("push\n")
      process.stdout.write("fetch\n\n")
    } else if(line === 'list for-push') {
      let refs = await repo.getReferences()
      refs.filter(r => r.isBranch() || r.isTag()).forEach(
        r => process.stdout.write(`0000000000000000000000000000000000000000 ${r.name()}\n`)
      )
      process.stdout.write("\n")
    } else if(line.startsWith('list')) {
      const branch = await ipfs.dag.get(`${process.argv[3]}/.git/HEAD`)
      process.stdout.write(`@${branch.value} HEAD\n`)
      await serializeRefs(`${process.argv[3]}/.git/refs`)
      process.stdout.write("\n")
    } else if(line.startsWith('push')) {
      try {
        const ref = line.replace(/^push\s+/, '')
        pushRefs.push(ref.split(':'))
      } catch(err) {
        console.error(`Can't Push: Invalid Refs: '${line}' (${err})\n`)
        process.exit(-12)
      }
    } else if(line.startsWith('fetch')) {
      const ref = line.replace(/^fetch\s+/, '')
      fetchRefs.push(ref.split(' '))
    } else if(line === '') { // a blank line follows a set of push/fetch commands
      if(pushRefs.length > 0) await doPush()
      if(fetchRefs.length > 0) await doFetch()
      process.stdout.write("\n")
    } else {
      console.debug(line)
    }
  })
})